{"ast":null,"code":"import _slicedToArray from\"/home/giibbu/crypto-sa/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Fader -- Fade in child elements\nimport{useState,useRef,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";var Fader=function Fader(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isVisible=_useState2[0],setVisible=_useState2[1];var domRef=useRef();useEffect(function(){var observer=new IntersectionObserver(function(entries){// Check intersecting\nif(entries[0].isIntersecting){// Set Visible\nsetVisible(true);// Unobserve\nobserver.unobserve(domRef.current);}});observer.observe(domRef.current);},[]);return/*#__PURE__*/_jsx(\"div\",{ref:domRef,className:\"fader \".concat(isVisible?\"is-visible\":\"\"),children:children});};export default Fader;","map":{"version":3,"sources":["/home/giibbu/crypto-sa/client/src/pages/components/Fader.js"],"names":["useState","useRef","useEffect","Fader","children","isVisible","setVisible","domRef","observer","IntersectionObserver","entries","isIntersecting","unobserve","current","observe"],"mappings":"gHAAA;AACA,OAASA,QAAT,CAAmBC,MAAnB,CAA2BC,SAA3B,KAA4C,OAA5C,C,2CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAER,IADFC,CAAAA,QACE,MADFA,QACE,CACF,cAAgCJ,QAAQ,CAAC,KAAD,CAAxC,wCAAOK,SAAP,eAAkBC,UAAlB,eACA,GAAMC,CAAAA,MAAM,CAAGN,MAAM,EAArB,CAEAC,SAAS,CAAC,UAAM,CACZ,GAAMM,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,oBAAJ,CAAyB,SAAAC,OAAO,CAAI,CACjD;AACA,GAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAf,CAA+B,CAC3B;AACAL,UAAU,CAAC,IAAD,CAAV,CACA;AACAE,QAAQ,CAACI,SAAT,CAAmBL,MAAM,CAACM,OAA1B,EACH,CACJ,CARgB,CAAjB,CAUAL,QAAQ,CAACM,OAAT,CAAiBP,MAAM,CAACM,OAAxB,EACH,CAZQ,CAYN,EAZM,CAAT,CAcA,mBACI,YAAK,GAAG,CAAGN,MAAX,CAAoB,SAAS,iBAAYF,SAAS,CAAG,YAAH,CAAkB,EAAvC,CAA7B,UACMD,QADN,EADJ,CAKH,CAzBD,CA2BA,cAAeD,CAAAA,KAAf","sourcesContent":["// Fader -- Fade in child elements\nimport { useState, useRef, useEffect } from 'react';\n\nconst Fader = ({\n    children,\n}) => {\n    const [isVisible, setVisible] = useState(false);\n    const domRef = useRef();\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(entries => {\n            // Check intersecting\n            if (entries[0].isIntersecting) {\n                // Set Visible\n                setVisible(true);\n                // Unobserve\n                observer.unobserve(domRef.current);\n            }\n        });\n\n        observer.observe(domRef.current);\n    }, []);\n\n    return(\n        <div ref={ domRef } className={`fader ${ isVisible ? \"is-visible\" : \"\" }`}>\n            { children }\n        </div>\n    );\n}\n\nexport default Fader;"]},"metadata":{},"sourceType":"module"}