{"ast":null,"code":"import _classCallCheck from\"/home/giibbu/crypto-sa/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/giibbu/crypto-sa/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/home/giibbu/crypto-sa/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/giibbu/crypto-sa/client/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/home/giibbu/crypto-sa/client/node_modules/@babel/runtime/helpers/esm/createSuper\";// BTC Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from'axios';import{Component}from'react';import{Container,Row,Col,ToggleButtonGroup,ToggleButton}from'react-bootstrap';import Chart from'react-apexcharts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BtcSpark=/*#__PURE__*/function(_Component){_inherits(BtcSpark,_Component);var _super=_createSuper(BtcSpark);function BtcSpark(){var _this;_classCallCheck(this,BtcSpark);_this=_super.call(this);// Store Promise to URl\n_this.componentDidMount=function(){_this.loadDay();// Load one day data by default\n};_this.axPromise=axios.get('/btcSpark');// State Values -- Chart Data/Configuration\n_this.state={price:0,// ApexCharts options\noptions:{colors:['#802bb1'],chart:{sparkline:'enabled',type:'area',stacked:false,toolbar:{show:false}},stroke:{show:true,curve:'smooth'},fill:{gradient:{enabled:true,opacityFrom:0.55,opacityTo:0}},dataLabels:{enabled:false},xaxis:{type:'datetime',labels:{show:false,formatter:function formatter(timestamp){return new Date(timestamp);}},axisTicks:{show:false},tooltip:{enabled:false}},yaxis:{show:false,labels:{show:false,formatter:function formatter(value){return'$'+value;}}},grid:{show:false},tooltip:{enabled:true,theme:'dark',fillSeriesColor:true,style:{fontSize:'14px'},y:{formatter:function formatter(value){return'$'+value.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2});}}},noData:{text:'Loading...',align:'center',verticalAlign:'middle',offsetX:0,offsetY:0,style:{color:'#802bb1',fontSize:'7rem'}}},series:[]// Chart Series (data)\n};// Bindings\n_this.loadDay=_this.loadDay.bind(_assertThisInitialized(_this));_this.loadWeek=_this.loadWeek.bind(_assertThisInitialized(_this));_this.loadMonth=_this.loadMonth.bind(_assertThisInitialized(_this));_this.loadYear=_this.loadYear.bind(_assertThisInitialized(_this));return _this;}_createClass(BtcSpark,[{key:\"loadDay\",value:// Load Chart Timeseries with 1 Day Data\nfunction loadDay(){var _this2=this;this.axPromise.then(function(response){// Store response body\nvar body=response['data'];// Check not null\nif(body){// Update State\n_this2.setState({price:body['price'],series:[{name:'BTC-USD',data:body['day']}]});}}).catch(function(error){console.log(error);});}// Load Chart Timeseries with 1 Week Data\n},{key:\"loadWeek\",value:function loadWeek(){var _this3=this;this.axPromise.then(function(response){// Store response body\nvar body=response['data'];// Check not null\nif(body){// Update State\n_this3.setState({series:[{name:'BTC-USD',data:body['week']}]});}}).catch(function(error){console.log(error);});}// Load Chart Timeseries with 1 Week Data\n},{key:\"loadMonth\",value:function loadMonth(){var _this4=this;this.axPromise.then(function(response){// Store response body\nvar body=response['data'];// Check not null\nif(body){// Update State\n_this4.setState({series:[{name:'BTC-USD',data:body['month']}]});}}).catch(function(error){console.log(error);});}// Load Chart Timeseries with 1 Week Data\n},{key:\"loadYear\",value:function loadYear(){var _this5=this;this.axPromise.then(function(response){// Store response body\nvar body=response['data'];// Check not null\nif(body){// Update State\n_this5.setState({series:[{name:'BTC-USD',data:body['year']}]});}}).catch(function(error){console.log(error);});}// On Component Mount\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(\"div\",{className:\"BtcSpark spark\",children:/*#__PURE__*/_jsxs(Container,{className:\"pt-5 pb-5\",children:[/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsxs(ToggleButtonGroup,{type:\"radio\",name:\"options\",defaultValue:0,children:[/*#__PURE__*/_jsx(ToggleButton,{id:\"tbg-radio-0\",size:\"lg\",value:0,name:\"coinToggleGroup\",onClick:this.loadDay,children:/*#__PURE__*/_jsx(\"strong\",{children:\" 1D \"})}),/*#__PURE__*/_jsx(ToggleButton,{id:\"tbg-radio-1\",size:\"lg\",value:1,name:\"coinToggleGroup\",onClick:this.loadWeek,children:/*#__PURE__*/_jsx(\"strong\",{children:\" 1W \"})}),/*#__PURE__*/_jsx(ToggleButton,{id:\"tbg-radio-2\",size:\"lg\",value:2,name:\"coinToggleGroup\",onClick:this.loadMonth,children:/*#__PURE__*/_jsx(\"strong\",{children:\" 1M \"})}),/*#__PURE__*/_jsx(ToggleButton,{id:\"tbg-radio-3\",size:\"lg\",value:3,name:\"coinToggleGroup\",onClick:this.loadYear,children:/*#__PURE__*/_jsx(\"strong\",{children:\" 1Y \"})})]})}),/*#__PURE__*/_jsxs(Col,{children:[/*#__PURE__*/_jsxs(\"h6\",{children:[\" $\",this.state.price,\" \"]}),/*#__PURE__*/_jsx(\"h5\",{children:\" BTC \"})]})]}),/*#__PURE__*/_jsx(Chart,{options:this.state.options,series:this.state.series,type:\"area\",width:\"100%\"})]})});}}]);return BtcSpark;}(Component);export default BtcSpark;","map":{"version":3,"sources":["/home/giibbu/crypto-sa/client/src/pages/components/btc/BtcSpark.js"],"names":["axios","Component","Container","Row","Col","ToggleButtonGroup","ToggleButton","Chart","BtcSpark","componentDidMount","loadDay","axPromise","get","state","price","options","colors","chart","sparkline","type","stacked","toolbar","show","stroke","curve","fill","gradient","enabled","opacityFrom","opacityTo","dataLabels","xaxis","labels","formatter","timestamp","Date","axisTicks","tooltip","yaxis","value","grid","theme","fillSeriesColor","style","fontSize","y","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","noData","text","align","verticalAlign","offsetX","offsetY","color","series","bind","loadWeek","loadMonth","loadYear","then","response","body","setState","name","data","catch","error","console","log"],"mappings":"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","sourcesContent":["// BTC Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, Row, Col, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\n\nclass BtcSpark extends Component {\n    constructor() {\n        super();\n        // Store Promise to URl\n        this.axPromise = axios.get('/btcSpark');\n\n        // State Values -- Chart Data/Configuration\n        this.state = {\n            price: 0,\n            // ApexCharts options\n            options: {\n                colors: ['#802bb1'],\n                chart: {\n                    sparkline: 'enabled',\n                    type: 'area',\n                    stacked: false,\n                    toolbar: {\n                        show: false\n                    }\n                },\n                stroke: {\n                    show: true,\n                    curve: 'smooth'\n                },\n                fill: {\n                    gradient: {\n                        enabled: true,\n                        opacityFrom: 0.55,\n                        opacityTo: 0\n                    }\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    type: 'datetime',\n                    labels: {\n                        show: false,\n                        formatter: function(timestamp) {\n                            return new Date(timestamp);\n                        }\n                    },\n                    axisTicks: {\n                        show: false,\n                    },\n                    tooltip: {\n                        enabled: false\n                    }\n                },\n                yaxis: {\n                    show: false,\n                    labels: {\n                        show: false,\n                        formatter: function(value) {\n                            return '$' + value;\n                        }\n                    }\n                },\n                grid: {\n                    show: false\n                },\n                tooltip: {\n                    enabled: true,\n                    theme: 'dark',\n                    fillSeriesColor: true,\n                    style: {\n                        fontSize: '14px'\n                    },\n                    y: {\n                        formatter: function(value) {\n                            return '$' + value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});\n                        }\n                    }\n                },\n                noData: {\n                    text: 'Loading...',\n                    align: 'center',\n                    verticalAlign: 'middle',\n                    offsetX: 0,\n                    offsetY: 0,\n                    style: {\n                        color: '#802bb1',\n                        fontSize: '7rem'\n                    }\n                }\n            },\n            series: [] // Chart Series (data)\n        }\n\n        // Bindings\n        this.loadDay = this.loadDay.bind(this);\n        this.loadWeek = this.loadWeek.bind(this);\n        this.loadMonth = this.loadMonth.bind(this);\n        this.loadYear = this.loadYear.bind(this);\n    };  \n\n\n    // Load Chart Timeseries with 1 Day Data\n    loadDay() {\n        this.axPromise.then(response => {\n            // Store response body\n            let body = response['data'];\n\n            // Check not null\n            if(body) {\n                // Update State\n                this.setState({\n                    price: body['price'],\n                    series: [{\n                        name: 'BTC-USD',\n                        data: body['day']\n                    }]\n                });\n            }\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    // Load Chart Timeseries with 1 Week Data\n    loadWeek() {\n        this.axPromise.then(response => {\n            // Store response body\n            let body = response['data'];\n\n            // Check not null\n            if(body) {\n                // Update State\n                this.setState({\n                    series: [{\n                        name: 'BTC-USD',\n                        data: body['week']\n                    }]\n                });\n            }\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    // Load Chart Timeseries with 1 Week Data\n    loadMonth() {\n        this.axPromise.then(response => {\n            // Store response body\n            let body = response['data'];\n\n            // Check not null\n            if(body) {\n                // Update State\n                this.setState({\n                    series: [{\n                        name: 'BTC-USD',\n                        data: body['month']\n                    }]\n                });\n            }\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    // Load Chart Timeseries with 1 Week Data\n    loadYear() {\n        this.axPromise.then(response => {\n            // Store response body\n            let body = response['data'];\n\n            // Check not null\n            if(body) {\n                // Update State\n                this.setState({\n                    series: [{\n                        name: 'BTC-USD',\n                        data: body['year']\n                    }]\n                });\n            }\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n\n    // On Component Mount\n    componentDidMount = () => {\n        this.loadDay();   // Load one day data by default\n    };\n\n    render() {\n        return(\n            <div className=\"BtcSpark spark\">\n                <Container className=\"pt-5 pb-5\">\n                    <Row>\n                        <Col>\n                            <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={0}>\n                                <ToggleButton id=\"tbg-radio-0\" size=\"lg\" value={0}\n                                 name=\"coinToggleGroup\" onClick={this.loadDay}> \n                                    <strong> 1D </strong> \n                                </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-1\" size=\"lg\" value={1}\n                                 name=\"coinToggleGroup\" onClick={this.loadWeek}> \n                                    <strong> 1W </strong> \n                                </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-2\" size=\"lg\" value={2}\n                                 name=\"coinToggleGroup\" onClick={this.loadMonth}> \n                                    <strong> 1M </strong> \n                                </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-3\" size=\"lg\" value={3}\n                                 name=\"coinToggleGroup\" onClick={this.loadYear}> \n                                    <strong> 1Y </strong> \n                                </ToggleButton>\n                            </ToggleButtonGroup>\n                        </Col>\n                        <Col>\n                            <h6> ${this.state.price} </h6>\n                            <h5> BTC </h5>\n                        </Col>\n                    </Row>\n\n                    <Chart \n                        options={this.state.options}\n                        series={this.state.series}\n                        type=\"area\"\n                        width=\"100%\" \n                    />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default BtcSpark;"]},"metadata":{},"sourceType":"module"}