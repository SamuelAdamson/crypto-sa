{"ast":null,"code":"var _jsxFileName = \"/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js\";\n// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EthSpark extends Component {\n  constructor() {\n    super(); // Axios Promise\n\n    this.componentDidMount = () => {\n      this.storeData(); // Store Data for Sparklines\n\n      this.loadDay(); // Load one day data by default\n\n      console.log(this.state.series);\n    };\n\n    this.axPromise = null;\n    this.price = null; // State Values -- Chart Data/Configuration\n\n    this.state = {\n      // ApexCharts options\n      options: {\n        title: {\n          text: 'Ethereum',\n          align: 'left',\n          margin: 10,\n          floating: true,\n          style: {\n            fontSize: '75px',\n            fontWeight: 'bold',\n            color: '#802bb1'\n          }\n        },\n        subtitle: {\n          text: this.price,\n          align: 'right',\n          margin: 10,\n          floating: true,\n          style: {\n            fontSize: '60px',\n            fontWeight: 'normal',\n            color: '#fff'\n          }\n        },\n        chart: {\n          type: 'area',\n          stacked: false,\n          toolbar: {\n            show: false\n          }\n        },\n        stroke: {\n          show: true,\n          curve: 'smooth',\n          colors: '#802bb1'\n        },\n        xaxis: {\n          type: 'datetime',\n          show: false,\n          labels: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          }\n        },\n        yaxis: {\n          show: false,\n          labels: {\n            show: false,\n            formatter: function (value) {\n              return '$' + value;\n            }\n          }\n        },\n        grid: {\n          show: false\n        },\n        noData: {\n          text: 'Loading...',\n          align: 'center',\n          verticalAlign: 'middle',\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            color: '#802bb1',\n            fontSize: '7rem'\n          }\n        }\n      },\n      series: [] // Chart Series (data)\n\n    };\n  }\n\n  // Get Data from backend\n  storeData() {\n    // Make request\n    const promise = axios.get('/ethSpark'); // Store promise result\n\n    this.axPromise = promise.then(response => response.data);\n  } // Load Chart Timeseries with 1 Day Data\n\n\n  loadDay() {\n    // Access promise data\n    this.axPromise.then(body => {\n      // Check not null\n      if (body) {\n        this.price = body['price']; // Store daydata in chart series\n\n        this.setState({\n          series: [{\n            name: 'ETH-USD',\n            data: body['day']\n          }]\n        });\n      } else {\n        // Null Response\n        console.log('Null Response!');\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // On Component Mount\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EthSpark spark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"pt-5 pb-5\",\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          type: \"radio\",\n          name: \"options\",\n          defaultValue: 0,\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-0\",\n            size: \"lg\",\n            value: 0,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1D \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-1\",\n            size: \"lg\",\n            value: 1,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1W \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-2\",\n            size: \"lg\",\n            value: 2,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1M \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-3\",\n            size: \"lg\",\n            value: 3,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1Y \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: this.state.options,\n          series: this.state.series,\n          type: \"line\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EthSpark;","map":{"version":3,"sources":["/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js"],"names":["axios","Component","Container","ToggleButtonGroup","ToggleButton","Chart","EthSpark","constructor","componentDidMount","storeData","loadDay","console","log","state","series","axPromise","price","options","title","text","align","margin","floating","style","fontSize","fontWeight","color","subtitle","chart","type","stacked","toolbar","show","stroke","curve","colors","xaxis","labels","axisTicks","yaxis","formatter","value","grid","noData","verticalAlign","offsetX","offsetY","promise","get","then","response","data","body","setState","name","catch","error","render"],"mappings":"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","sourcesContent":["// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\n\nclass EthSpark extends Component {\n    constructor() {\n        super();\n        // Axios Promise\n        this.axPromise = null;\n        this.price = null;\n\n        // State Values -- Chart Data/Configuration\n        this.state = {\n            // ApexCharts options\n            options: {\n                title: {\n                    text: 'Ethereum',\n                    align: 'left',\n                    margin: 10,\n                    floating: true,\n                    style: {\n                        fontSize:  '75px',\n                        fontWeight:  'bold',\n                        color:  '#802bb1'\n                    },\n                },\n                subtitle: {\n                    text: this.price,\n                    align: 'right',\n                    margin: 10,\n                    floating: true,\n                    style: {\n                        fontSize:  '60px',\n                        fontWeight:  'normal',\n                        color:  '#fff'\n                    },\n                },\n                chart: {\n                    type: 'area',\n                    stacked: false,\n                    toolbar: {\n                        show: false\n                    }\n                },\n                stroke: {\n                    show: true,\n                    curve: 'smooth',\n                    colors: '#802bb1'\n                },\n                xaxis: {\n                    type: 'datetime',\n                    show: false,\n                    labels: {\n                        show: false\n                    },\n                    axisTicks: {\n                        show: false\n                    }\n                    \n                },\n                yaxis: {\n                    show: false,\n                    labels: {\n                        show: false,\n                        formatter: function(value) {\n                            return '$' + value;\n                        }\n                    }\n                },\n                grid: {\n                    show: false\n                },\n                noData: {\n                    text: 'Loading...',\n                    align: 'center',\n                    verticalAlign: 'middle',\n                    offsetX: 0,\n                    offsetY: 0,\n                    style: {\n                        color: '#802bb1',\n                        fontSize: '7rem'\n                    }\n                }\n            },\n            series: [] // Chart Series (data)\n        };\n    };  \n\n    // Get Data from backend\n    storeData() {\n        // Make request\n        const promise = axios.get('/ethSpark');\n        // Store promise result\n        this.axPromise = promise.then((response) => response.data);\n    }\n\n    // Load Chart Timeseries with 1 Day Data\n    loadDay() {\n        // Access promise data\n        this.axPromise.then(body => {\n            // Check not null\n            if(body) {\n                this.price = body['price'];\n                // Store daydata in chart series\n                this.setState({\n                    series: [{\n                        name: 'ETH-USD',\n                        data: body['day']\n                    }]\n                });\n            } else { // Null Response\n                console.log('Null Response!');\n            }\n\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    // On Component Mount\n    componentDidMount = () => {\n        this.storeData(); // Store Data for Sparklines\n        this.loadDay();   // Load one day data by default\n        console.log(this.state.series);\n    };\n\n    render() {\n        return(\n            <div className=\"EthSpark spark\">\n                <Container className=\"pt-5 pb-5\">\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={0}>\n                        <ToggleButton id=\"tbg-radio-0\" size=\"lg\" value={0}> <strong> 1D </strong> </ToggleButton>\n                        <ToggleButton id=\"tbg-radio-1\" size=\"lg\" value={1}> <strong> 1W </strong> </ToggleButton>\n                        <ToggleButton id=\"tbg-radio-2\" size=\"lg\" value={2}> <strong> 1M </strong> </ToggleButton>\n                        <ToggleButton id=\"tbg-radio-3\" size=\"lg\" value={3}> <strong> 1Y </strong> </ToggleButton>\n                    </ToggleButtonGroup>\n\n                    <Chart \n                        options={this.state.options}\n                        series={this.state.series}\n                        type=\"line\"\n                        width=\"100%\" \n                    />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default EthSpark;"]},"metadata":{},"sourceType":"module"}