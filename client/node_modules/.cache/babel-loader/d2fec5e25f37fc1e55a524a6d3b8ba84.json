{"ast":null,"code":"var _jsxFileName = \"/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js\";\n// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EthSpark extends Component {\n  constructor() {\n    super(); // Store requests from API\n\n    this.componentDidMount = () => {\n      this.storeData(); // Store Data for Sparklines\n    };\n\n    this.dayData = 'nothing';\n    this.weekData = {};\n    this.monthData = {};\n    this.yearData = {}; // Chart Options\n    // Options -- Configuration\n\n    this.chartOps = {\n      responsive: true,\n      legend: {\n        display: false\n      },\n      elements: {\n        line: {\n          borderColor: 'rgba(128, 43, 177, 1)',\n          borderWidth: 2\n        },\n        point: {\n          radius: 1\n        }\n      },\n      scales: {\n        yAxes: [{\n          display: false,\n          gridLines: {\n            display: false\n          }\n        }],\n        xAxes: [{\n          display: false,\n          gridLines: {\n            display: false\n          }\n        }]\n      }\n    }; // State Values -- Chart Configuration\n\n    this.state = {\n      // Chart Data -- used in final\n      chartData: {}\n    };\n  }\n\n  // Get Data from backend\n  storeData() {\n    // Make request\n    axios.get('/ethSpark').then(response => {\n      // Story response body\n      let body = response['data']; // Check not null\n\n      if (body) {\n        // Store day, week, month, year data\n        this.dayData = {\n          labels: body['day']['labels'],\n          datasets: [{\n            data: body['day']['data'],\n            fill: false,\n            backgroundColor: 'transparent',\n            borderColor: 'rgba(128, 43, 177, 1)'\n          }]\n        };\n        this.setState({\n          chartData: this.dayData\n        });\n      } else {\n        console.log('Null Response!');\n        this.setState({\n          // Set all to null\n          dayData: null,\n          weekData: null,\n          monthData: null,\n          yearData: null,\n          chartData: null,\n          chartOps: null\n        });\n      }\n    }).catch(function (error) {\n      // Log Error\n      console.log(error);\n      this.setState({\n        // Set all to null\n        dayData: null,\n        weekData: null,\n        monthData: null,\n        yearData: null,\n        chartData: null,\n        chartOps: null\n      });\n    });\n  } // On Component Mount\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EthSpark spark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          type: \"radio\",\n          name: \"options\",\n          defaultValue: 0,\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-0\",\n            size: \"lg\",\n            value: 0,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1D \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-1\",\n            size: \"lg\",\n            value: 1,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1W \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-2\",\n            size: \"lg\",\n            value: 2,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1M \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            id: \"tbg-radio-3\",\n            size: \"lg\",\n            value: 3,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \" 1Y \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 77\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Line, {\n          data: this.state.chartData,\n          options: this.chartOps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EthSpark;","map":{"version":3,"sources":["/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js"],"names":["axios","Component","Container","ToggleButtonGroup","ToggleButton","Line","EthSpark","constructor","componentDidMount","storeData","dayData","weekData","monthData","yearData","chartOps","responsive","legend","display","elements","line","borderColor","borderWidth","point","radius","scales","yAxes","gridLines","xAxes","state","chartData","get","then","response","body","labels","datasets","data","fill","backgroundColor","setState","console","log","catch","error","render"],"mappings":"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","sourcesContent":["// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\n\nclass EthSpark extends Component {\n    constructor() {\n        super();\n        \n        // Store requests from API\n        this.dayData = 'nothing';\n        this.weekData = {};\n        this.monthData = {};\n        this.yearData = {};\n\n        // Chart Options\n        // Options -- Configuration\n        this.chartOps = {\n            responsive: true,\n            legend: { display: false },\n            elements: {\n                line: {\n                    borderColor: 'rgba(128, 43, 177, 1)',\n                    borderWidth: 2\n                },\n                point: { radius: 1 }\n            },\n            scales: {\n                yAxes: [{ \n                    display: false,\n                    gridLines: { display: false }\n                }],\n                xAxes: [{ \n                    display: false,\n                    gridLines: { display: false }\n                }]\n            }\n        }\n\n        // State Values -- Chart Configuration\n        this.state = {\n            // Chart Data -- used in final\n            chartData: {}\n        };\n    };\n\n    // Get Data from backend\n    storeData() {\n        // Make request\n        axios\n            .get('/ethSpark')\n            .then(response => {\n                // Story response body\n                let body = response['data'];\n                \n                // Check not null\n                if(body) {\n\n                    // Store day, week, month, year data\n                    this.dayData = {\n                            labels: body['day']['labels'],\n                            datasets: [{\n                                data: body['day']['data'],\n                                fill: false,\n                                backgroundColor: 'transparent',\n                                borderColor: 'rgba(128, 43, 177, 1)',\n                            }]\n                    }\n\n                    this.setState({\n                        chartData: this.dayData\n                    })\n\n                } else {\n                    console.log('Null Response!');\n                    this.setState({\n                        // Set all to null\n                        dayData: null, weekData: null, monthData: null, yearData: null,\n                        chartData: null, chartOps: null\n                    });   \n                }\n\n            })\n            .catch( function(error) {\n                // Log Error\n                console.log(error);\n                this.setState({\n                    // Set all to null\n                    dayData: null, weekData: null, monthData: null, yearData: null,\n                    chartData: null, chartOps: null\n                });\n            });\n    }\n\n    // On Component Mount\n    componentDidMount = () => {\n        this.storeData(); // Store Data for Sparklines\n    };\n\n    render() {\n        return(\n            <div className=\"EthSpark spark\">\n                <Container>\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={0}>\n                        <ToggleButton id=\"tbg-radio-0\" size=\"lg\" value={0}> <strong> 1D </strong> </ToggleButton>\n                        <ToggleButton id=\"tbg-radio-1\" size=\"lg\" value={1}> <strong> 1W </strong> </ToggleButton>\n                        <ToggleButton id=\"tbg-radio-2\" size=\"lg\" value={2}> <strong> 1M </strong> </ToggleButton>\n                        <ToggleButton id=\"tbg-radio-3\" size=\"lg\" value={3}> <strong> 1Y </strong> </ToggleButton>\n                    </ToggleButtonGroup>\n\n                    <Line data={this.state.chartData} options={this.chartOps} />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default EthSpark;"]},"metadata":{},"sourceType":"module"}