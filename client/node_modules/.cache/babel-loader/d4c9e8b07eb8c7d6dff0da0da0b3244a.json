{"ast":null,"code":"var _jsxFileName = \"/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js\";\n// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, Row, Col, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EthSpark extends Component {\n  constructor() {\n    super(); // Axios Promise\n\n    this.componentDidMount = () => {\n      this.storeData(); // Store Data for Sparklines\n\n      this.loadDay(); // Load one day data by default\n\n      console.log(this.state.series);\n    };\n\n    this.axPromise = null; // State Values -- Chart Data/Configuration\n\n    this.state = {\n      price: 0,\n      // ApexCharts options\n      options: {\n        colors: ['#802bb1'],\n        chart: {\n          sparkline: 'enabled',\n          type: 'area',\n          stacked: false,\n          toolbar: {\n            show: false\n          }\n        },\n        stroke: {\n          show: true,\n          curve: 'smooth'\n        },\n        fill: {\n          gradient: {\n            enabled: true,\n            opacityFrom: 0.55,\n            opacityTo: 0\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            show: false,\n            formatter: function (timestamp) {\n              return new Date(timestamp);\n            }\n          },\n          axisTicks: {\n            show: false\n          },\n          tooltip: {\n            enabled: false\n          }\n        },\n        yaxis: {\n          show: false,\n          labels: {\n            show: false,\n            formatter: function (value) {\n              return '$' + value;\n            }\n          }\n        },\n        grid: {\n          show: false\n        },\n        tooltip: {\n          enabled: true,\n          theme: 'dark',\n          fillSeriesColor: true,\n          style: {\n            fontSize: '14px'\n          },\n          y: {\n            formatter: function (value) {\n              return '$' + value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n              });\n            }\n          }\n        },\n        noData: {\n          text: 'Loading...',\n          align: 'center',\n          verticalAlign: 'middle',\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            color: '#802bb1',\n            fontSize: '7rem'\n          }\n        }\n      },\n      series: [] // Chart Series (data)\n\n    };\n  }\n\n  // Get Data from backend\n  storeData() {\n    // Make request\n    const promise = axios.get('/ethSpark'); // Store promise result\n\n    this.axPromise = promise.then(response => response.data);\n  } // Load Chart Timeseries with 1 Day Data\n\n\n  loadDay() {\n    // Access promise data\n    this.axPromise.then(body => {\n      // Check not null\n      if (body) {\n        // Store daydata in chart series\n        this.setState({\n          price: body['price'],\n          series: [{\n            name: 'ETH-USD',\n            data: body['day']\n          }]\n        });\n      } else {\n        // Null Response\n        console.log('Null Response!');\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // Load Chart Timeseries with 1 Week Data\n\n\n  loadWeek() {\n    console.log(\"Load Week!\"); // // Access promise data\n    // this.axPromise.then(body => {\n    //     // Check not null\n    //     if(body) {\n    //         // Store daydata in chart series\n    //         this.setState({\n    //             price: body['price'],\n    //             series: [{\n    //                 name: 'ETH-USD',\n    //                 data: body['day']\n    //             }]\n    //         });\n    //     } else { // Null Response\n    //         console.log('Null Response!');\n    //     }\n    // })\n    // .catch(function(error) {\n    //     console.log(error);\n    // });\n  } // On Component Mount\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EthSpark spark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"pt-5 pb-5\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n              type: \"radio\",\n              name: \"options\",\n              defaultValue: 0,\n              children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-0\",\n                size: \"lg\",\n                onClick: this.loadDay(),\n                value: 0,\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1D \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 110\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-1\",\n                size: \"lg\",\n                value: 1,\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1W \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 85\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-2\",\n                size: \"lg\",\n                value: 2,\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1M \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 85\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-3\",\n                size: \"lg\",\n                value: 3,\n                children: [\" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1Y \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 85\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [\" $\", this.state.price, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \" ETH \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: this.state.options,\n          series: this.state.series,\n          type: \"area\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EthSpark;","map":{"version":3,"sources":["/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js"],"names":["axios","Component","Container","Row","Col","ToggleButtonGroup","ToggleButton","Chart","EthSpark","constructor","componentDidMount","storeData","loadDay","console","log","state","series","axPromise","price","options","colors","chart","sparkline","type","stacked","toolbar","show","stroke","curve","fill","gradient","enabled","opacityFrom","opacityTo","dataLabels","xaxis","labels","formatter","timestamp","Date","axisTicks","tooltip","yaxis","value","grid","theme","fillSeriesColor","style","fontSize","y","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","noData","text","align","verticalAlign","offsetX","offsetY","color","promise","get","then","response","data","body","setState","name","catch","error","loadWeek","render"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,iBAA9B,EAAiDC,YAAjD,QAAqE,iBAArE;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;;AAEA,MAAMC,QAAN,SAAuBP,SAAvB,CAAiC;AAC7BQ,EAAAA,WAAW,GAAG;AACV,YADU,CAEV;;AAFU,SAmJdC,iBAnJc,GAmJM,MAAM;AACtB,WAAKC,SAAL,GADsB,CACJ;;AAClB,WAAKC,OAAL,GAFsB,CAEJ;;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,MAAvB;AACH,KAvJa;;AAGV,SAAKC,SAAL,GAAiB,IAAjB,CAHU,CAKV;;AACA,SAAKF,KAAL,GAAa;AACTG,MAAAA,KAAK,EAAE,CADE;AAET;AACAC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,CAAC,SAAD,CADH;AAELC,QAAAA,KAAK,EAAE;AACHC,UAAAA,SAAS,EAAE,SADR;AAEHC,UAAAA,IAAI,EAAE,MAFH;AAGHC,UAAAA,OAAO,EAAE,KAHN;AAIHC,UAAAA,OAAO,EAAE;AACLC,YAAAA,IAAI,EAAE;AADD;AAJN,SAFF;AAULC,QAAAA,MAAM,EAAE;AACJD,UAAAA,IAAI,EAAE,IADF;AAEJE,UAAAA,KAAK,EAAE;AAFH,SAVH;AAcLC,QAAAA,IAAI,EAAE;AACFC,UAAAA,QAAQ,EAAE;AACNC,YAAAA,OAAO,EAAE,IADH;AAENC,YAAAA,WAAW,EAAE,IAFP;AAGNC,YAAAA,SAAS,EAAE;AAHL;AADR,SAdD;AAqBLC,QAAAA,UAAU,EAAE;AACRH,UAAAA,OAAO,EAAE;AADD,SArBP;AAwBLI,QAAAA,KAAK,EAAE;AACHZ,UAAAA,IAAI,EAAE,UADH;AAEHa,UAAAA,MAAM,EAAE;AACJV,YAAAA,IAAI,EAAE,KADF;AAEJW,YAAAA,SAAS,EAAE,UAASC,SAAT,EAAoB;AAC3B,qBAAO,IAAIC,IAAJ,CAASD,SAAT,CAAP;AACH;AAJG,WAFL;AAQHE,UAAAA,SAAS,EAAE;AACPd,YAAAA,IAAI,EAAE;AADC,WARR;AAWHe,UAAAA,OAAO,EAAE;AACLV,YAAAA,OAAO,EAAE;AADJ;AAXN,SAxBF;AAuCLW,QAAAA,KAAK,EAAE;AACHhB,UAAAA,IAAI,EAAE,KADH;AAEHU,UAAAA,MAAM,EAAE;AACJV,YAAAA,IAAI,EAAE,KADF;AAEJW,YAAAA,SAAS,EAAE,UAASM,KAAT,EAAgB;AACvB,qBAAO,MAAMA,KAAb;AACH;AAJG;AAFL,SAvCF;AAgDLC,QAAAA,IAAI,EAAE;AACFlB,UAAAA,IAAI,EAAE;AADJ,SAhDD;AAmDLe,QAAAA,OAAO,EAAE;AACLV,UAAAA,OAAO,EAAE,IADJ;AAELc,UAAAA,KAAK,EAAE,MAFF;AAGLC,UAAAA,eAAe,EAAE,IAHZ;AAILC,UAAAA,KAAK,EAAE;AACHC,YAAAA,QAAQ,EAAE;AADP,WAJF;AAOLC,UAAAA,CAAC,EAAE;AACCZ,YAAAA,SAAS,EAAE,UAASM,KAAT,EAAgB;AACvB,qBAAO,MAAMA,KAAK,CAACO,cAAN,CAAqBC,SAArB,EAAgC;AAACC,gBAAAA,qBAAqB,EAAE,CAAxB;AAA2BC,gBAAAA,qBAAqB,EAAE;AAAlD,eAAhC,CAAb;AACH;AAHF;AAPE,SAnDJ;AAgELC,QAAAA,MAAM,EAAE;AACJC,UAAAA,IAAI,EAAE,YADF;AAEJC,UAAAA,KAAK,EAAE,QAFH;AAGJC,UAAAA,aAAa,EAAE,QAHX;AAIJC,UAAAA,OAAO,EAAE,CAJL;AAKJC,UAAAA,OAAO,EAAE,CALL;AAMJZ,UAAAA,KAAK,EAAE;AACHa,YAAAA,KAAK,EAAE,SADJ;AAEHZ,YAAAA,QAAQ,EAAE;AAFP;AANH;AAhEH,OAHA;AA+EThC,MAAAA,MAAM,EAAE,EA/EC,CA+EE;;AA/EF,KAAb;AAiFH;;AAED;AACAL,EAAAA,SAAS,GAAG;AACR;AACA,UAAMkD,OAAO,GAAG7D,KAAK,CAAC8D,GAAN,CAAU,WAAV,CAAhB,CAFQ,CAGR;;AACA,SAAK7C,SAAL,GAAiB4C,OAAO,CAACE,IAAR,CAAcC,QAAD,IAAcA,QAAQ,CAACC,IAApC,CAAjB;AACH,GAhG4B,CAkG7B;;;AACArD,EAAAA,OAAO,GAAG;AACN;AACA,SAAKK,SAAL,CAAe8C,IAAf,CAAoBG,IAAI,IAAI;AACxB;AACA,UAAGA,IAAH,EAAS;AACL;AACA,aAAKC,QAAL,CAAc;AACVjD,UAAAA,KAAK,EAAEgD,IAAI,CAAC,OAAD,CADD;AAEVlD,UAAAA,MAAM,EAAE,CAAC;AACLoD,YAAAA,IAAI,EAAE,SADD;AAELH,YAAAA,IAAI,EAAEC,IAAI,CAAC,KAAD;AAFL,WAAD;AAFE,SAAd;AAOH,OATD,MASO;AAAE;AACLrD,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;AAEJ,KAfD,EAgBCuD,KAhBD,CAgBO,UAASC,KAAT,EAAgB;AACnBzD,MAAAA,OAAO,CAACC,GAAR,CAAYwD,KAAZ;AACH,KAlBD;AAmBH,GAxH4B,CA0H7B;;;AACAC,EAAAA,QAAQ,GAAG;AACP1D,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADO,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACH,GAjJ4B,CAmJ7B;;;AAOA0D,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,WAArB;AAAA,gCACI,QAAC,GAAD;AAAA,kCACI,QAAC,GAAD;AAAA,mCACI,QAAC,iBAAD;AAAmB,cAAA,IAAI,EAAC,OAAxB;AAAgC,cAAA,IAAI,EAAC,SAArC;AAA+C,cAAA,YAAY,EAAE,CAA7D;AAAA,sCACI,QAAC,YAAD;AAAc,gBAAA,EAAE,EAAC,aAAjB;AAA+B,gBAAA,IAAI,EAAC,IAApC;AAAyC,gBAAA,OAAO,EAAE,KAAK5D,OAAL,EAAlD;AAAkE,gBAAA,KAAK,EAAE,CAAzE;AAAA,6CAA6E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA7E;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,YAAD;AAAc,gBAAA,EAAE,EAAC,aAAjB;AAA+B,gBAAA,IAAI,EAAC,IAApC;AAAyC,gBAAA,KAAK,EAAE,CAAhD;AAAA,6CAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApD;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI,QAAC,YAAD;AAAc,gBAAA,EAAE,EAAC,aAAjB;AAA+B,gBAAA,IAAI,EAAC,IAApC;AAAyC,gBAAA,KAAK,EAAE,CAAhD;AAAA,6CAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApD;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAII,QAAC,YAAD;AAAc,gBAAA,EAAE,EAAC,aAAjB;AAA+B,gBAAA,IAAI,EAAC,IAApC;AAAyC,gBAAA,KAAK,EAAE,CAAhD;AAAA,6CAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAApD;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eASI,QAAC,GAAD;AAAA,oCACI;AAAA,+BAAO,KAAKG,KAAL,CAAWG,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAgBI,QAAC,KAAD;AACI,UAAA,OAAO,EAAE,KAAKH,KAAL,CAAWI,OADxB;AAEI,UAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWC,MAFvB;AAGI,UAAA,IAAI,EAAC,MAHT;AAII,UAAA,KAAK,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AA2BH;;AAtL4B;;AAyLjC,eAAeR,QAAf","sourcesContent":["// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, Row, Col, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\n\nclass EthSpark extends Component {\n    constructor() {\n        super();\n        // Axios Promise\n        this.axPromise = null;\n\n        // State Values -- Chart Data/Configuration\n        this.state = {\n            price: 0,\n            // ApexCharts options\n            options: {\n                colors: ['#802bb1'],\n                chart: {\n                    sparkline: 'enabled',\n                    type: 'area',\n                    stacked: false,\n                    toolbar: {\n                        show: false\n                    }\n                },\n                stroke: {\n                    show: true,\n                    curve: 'smooth'\n                },\n                fill: {\n                    gradient: {\n                        enabled: true,\n                        opacityFrom: 0.55,\n                        opacityTo: 0\n                    }\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    type: 'datetime',\n                    labels: {\n                        show: false,\n                        formatter: function(timestamp) {\n                            return new Date(timestamp);\n                        }\n                    },\n                    axisTicks: {\n                        show: false,\n                    },\n                    tooltip: {\n                        enabled: false\n                    }\n                },\n                yaxis: {\n                    show: false,\n                    labels: {\n                        show: false,\n                        formatter: function(value) {\n                            return '$' + value;\n                        }\n                    }\n                },\n                grid: {\n                    show: false\n                },\n                tooltip: {\n                    enabled: true,\n                    theme: 'dark',\n                    fillSeriesColor: true,\n                    style: {\n                        fontSize: '14px'\n                    },\n                    y: {\n                        formatter: function(value) {\n                            return '$' + value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});\n                        }\n                    }\n                },\n                noData: {\n                    text: 'Loading...',\n                    align: 'center',\n                    verticalAlign: 'middle',\n                    offsetX: 0,\n                    offsetY: 0,\n                    style: {\n                        color: '#802bb1',\n                        fontSize: '7rem'\n                    }\n                }\n            },\n            series: [] // Chart Series (data)\n        };\n    };  \n\n    // Get Data from backend\n    storeData() {\n        // Make request\n        const promise = axios.get('/ethSpark');\n        // Store promise result\n        this.axPromise = promise.then((response) => response.data);\n    }\n\n    // Load Chart Timeseries with 1 Day Data\n    loadDay() {\n        // Access promise data\n        this.axPromise.then(body => {\n            // Check not null\n            if(body) {\n                // Store daydata in chart series\n                this.setState({\n                    price: body['price'],\n                    series: [{\n                        name: 'ETH-USD',\n                        data: body['day']\n                    }]\n                });\n            } else { // Null Response\n                console.log('Null Response!');\n            }\n\n        })\n        .catch(function(error) {\n            console.log(error);\n        });\n    }\n\n    // Load Chart Timeseries with 1 Week Data\n    loadWeek() {\n        console.log(\"Load Week!\");\n        // // Access promise data\n        // this.axPromise.then(body => {\n        //     // Check not null\n        //     if(body) {\n        //         // Store daydata in chart series\n        //         this.setState({\n        //             price: body['price'],\n        //             series: [{\n        //                 name: 'ETH-USD',\n        //                 data: body['day']\n        //             }]\n        //         });\n        //     } else { // Null Response\n        //         console.log('Null Response!');\n        //     }\n\n        // })\n        // .catch(function(error) {\n        //     console.log(error);\n        // });\n    }\n\n    // On Component Mount\n    componentDidMount = () => {\n        this.storeData(); // Store Data for Sparklines\n        this.loadDay();   // Load one day data by default\n        console.log(this.state.series);\n    };\n\n    render() {\n        return(\n            <div className=\"EthSpark spark\">\n                <Container className=\"pt-5 pb-5\">\n                    <Row>\n                        <Col>\n                            <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={0}>\n                                <ToggleButton id=\"tbg-radio-0\" size=\"lg\" onClick={this.loadDay()} value={0}> <strong> 1D </strong> </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-1\" size=\"lg\" value={1}> <strong> 1W </strong> </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-2\" size=\"lg\" value={2}> <strong> 1M </strong> </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-3\" size=\"lg\" value={3}> <strong> 1Y </strong> </ToggleButton>\n                            </ToggleButtonGroup>\n                        </Col>\n                        <Col>\n                            <h6> ${this.state.price} </h6>\n                            <h5> ETH </h5>\n                        </Col>\n                    </Row>\n\n                    <Chart \n                        options={this.state.options}\n                        series={this.state.series}\n                        type=\"area\"\n                        width=\"100%\" \n                    />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default EthSpark;"]},"metadata":{},"sourceType":"module"}