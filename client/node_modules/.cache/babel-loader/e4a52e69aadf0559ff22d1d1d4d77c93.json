{"ast":null,"code":"var _jsxFileName = \"/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js\";\n// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, Row, Col, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EthSpark extends Component {\n  constructor() {\n    super(); // Store promise\n\n    this.componentDidMount = () => {\n      this.getData(); // Get data\n\n      this.loadDay(); // Load one day data by default\n    };\n\n    this.axPromise = axios.get('/ethSpark'); // State Values -- Chart Data/Configuration\n\n    this.state = {\n      sparkData: 'unchanged',\n      price: 0,\n      // ApexCharts options\n      options: {\n        colors: ['#802bb1'],\n        chart: {\n          sparkline: 'enabled',\n          type: 'area',\n          stacked: false,\n          toolbar: {\n            show: false\n          }\n        },\n        stroke: {\n          show: true,\n          curve: 'smooth'\n        },\n        fill: {\n          gradient: {\n            enabled: true,\n            opacityFrom: 0.55,\n            opacityTo: 0\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        xaxis: {\n          type: 'datetime',\n          labels: {\n            show: false,\n            formatter: function (timestamp) {\n              return new Date(timestamp);\n            }\n          },\n          axisTicks: {\n            show: false\n          },\n          tooltip: {\n            enabled: false\n          }\n        },\n        yaxis: {\n          show: false,\n          labels: {\n            show: false,\n            formatter: function (value) {\n              return '$' + value;\n            }\n          }\n        },\n        grid: {\n          show: false\n        },\n        tooltip: {\n          enabled: true,\n          theme: 'dark',\n          fillSeriesColor: true,\n          style: {\n            fontSize: '14px'\n          },\n          y: {\n            formatter: function (value) {\n              return '$' + value.toLocaleString(undefined, {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n              });\n            }\n          }\n        },\n        noData: {\n          text: 'Loading...',\n          align: 'center',\n          verticalAlign: 'middle',\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            color: '#802bb1',\n            fontSize: '7rem'\n          }\n        }\n      },\n      series: [] // Chart Series (data)\n\n    }; // Bindings\n\n    this.loadDay = this.loadDay.bind(this);\n    this.getData = this.getData.bind(this);\n  }\n\n  // Get data from API\n  getData() {\n    axios.get('/ethSpark').then(response => {\n      let body = response['data'];\n\n      if (body) {\n        this.setState({\n          sparkData: body[0]\n        });\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // Load Chart Timeseries with 1 Day Data\n\n\n  loadDay() {\n    console.log(this.state.sparkData);\n  } // On Component Mount\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EthSpark spark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        className: \"pt-5 pb-5\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n              type: \"radio\",\n              name: \"options\",\n              defaultValue: 0,\n              children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-0\",\n                size: \"lg\",\n                value: 0,\n                name: \"coinToggleGroup\",\n                onClick: this.loadDay,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1D \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-1\",\n                size: \"lg\",\n                value: 1,\n                name: \"coinToggleGroup\",\n                onClick: this.loadWeek,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1W \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-2\",\n                size: \"lg\",\n                value: 2,\n                name: \"coinToggleGroup\",\n                onClick: this.loadMonth,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1M \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: \"tbg-radio-3\",\n                size: \"lg\",\n                value: 3,\n                name: \"coinToggleGroup\",\n                onClick: this.loadYear,\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \" 1Y \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [\" $\", this.state.price, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \" ETH \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Chart, {\n          options: this.state.options,\n          series: this.state.series,\n          type: \"area\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default EthSpark;","map":{"version":3,"sources":["/home/giibbu/crypto-sa/frontend/src/pages/components/eth/EthSpark.js"],"names":["axios","Component","Container","Row","Col","ToggleButtonGroup","ToggleButton","Chart","EthSpark","constructor","componentDidMount","getData","loadDay","axPromise","get","state","sparkData","price","options","colors","chart","sparkline","type","stacked","toolbar","show","stroke","curve","fill","gradient","enabled","opacityFrom","opacityTo","dataLabels","xaxis","labels","formatter","timestamp","Date","axisTicks","tooltip","yaxis","value","grid","theme","fillSeriesColor","style","fontSize","y","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","noData","text","align","verticalAlign","offsetX","offsetY","color","series","bind","then","response","body","setState","catch","error","console","log","render","loadWeek","loadMonth","loadYear"],"mappings":"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","sourcesContent":["// ETH Page -- Sparkline\n// Author: Samuel Adamson\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { Container, Row, Col, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\nimport Chart from 'react-apexcharts';\n\nclass EthSpark extends Component {\n    constructor() {\n        super();\n        // Store promise\n        this.axPromise = axios.get('/ethSpark');\n\n        // State Values -- Chart Data/Configuration\n        this.state = {\n            sparkData: 'unchanged',\n            price: 0,\n            // ApexCharts options\n            options: {\n                colors: ['#802bb1'],\n                chart: {\n                    sparkline: 'enabled',\n                    type: 'area',\n                    stacked: false,\n                    toolbar: {\n                        show: false\n                    }\n                },\n                stroke: {\n                    show: true,\n                    curve: 'smooth'\n                },\n                fill: {\n                    gradient: {\n                        enabled: true,\n                        opacityFrom: 0.55,\n                        opacityTo: 0\n                    }\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                xaxis: {\n                    type: 'datetime',\n                    labels: {\n                        show: false,\n                        formatter: function(timestamp) {\n                            return new Date(timestamp);\n                        }\n                    },\n                    axisTicks: {\n                        show: false,\n                    },\n                    tooltip: {\n                        enabled: false\n                    }\n                },\n                yaxis: {\n                    show: false,\n                    labels: {\n                        show: false,\n                        formatter: function(value) {\n                            return '$' + value;\n                        }\n                    }\n                },\n                grid: {\n                    show: false\n                },\n                tooltip: {\n                    enabled: true,\n                    theme: 'dark',\n                    fillSeriesColor: true,\n                    style: {\n                        fontSize: '14px'\n                    },\n                    y: {\n                        formatter: function(value) {\n                            return '$' + value.toLocaleString(undefined, {minimumFractionDigits: 2, maximumFractionDigits: 2});\n                        }\n                    }\n                },\n                noData: {\n                    text: 'Loading...',\n                    align: 'center',\n                    verticalAlign: 'middle',\n                    offsetX: 0,\n                    offsetY: 0,\n                    style: {\n                        color: '#802bb1',\n                        fontSize: '7rem'\n                    }\n                }\n            },\n            series: [] // Chart Series (data)\n        }\n\n        // Bindings\n        this.loadDay = this.loadDay.bind(this);\n        this.getData = this.getData.bind(this);\n    };  \n\n\n    // Get data from API\n    getData() {\n        axios\n            .get('/ethSpark')\n            .then(response => {\n                let body = response['data'];\n\n                if(body) {\n                    this.setState({\n                        sparkData: body[0]\n                    });\n                }\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    // Load Chart Timeseries with 1 Day Data\n    loadDay() {\n        console.log(this.state.sparkData);\n    }\n\n\n    // On Component Mount\n    componentDidMount = () => {\n        this.getData();   // Get data\n        this.loadDay();   // Load one day data by default\n    };\n\n    render() {\n        return(\n            <div className=\"EthSpark spark\">\n                <Container className=\"pt-5 pb-5\">\n                    <Row>\n                        <Col>\n                            <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={0}>\n                                <ToggleButton id=\"tbg-radio-0\" size=\"lg\" value={0}\n                                 name=\"coinToggleGroup\" onClick={this.loadDay}> \n                                    <strong> 1D </strong> \n                                </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-1\" size=\"lg\" value={1}\n                                 name=\"coinToggleGroup\" onClick={this.loadWeek}> \n                                    <strong> 1W </strong> \n                                </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-2\" size=\"lg\" value={2}\n                                 name=\"coinToggleGroup\" onClick={this.loadMonth}> \n                                    <strong> 1M </strong> \n                                </ToggleButton>\n                                <ToggleButton id=\"tbg-radio-3\" size=\"lg\" value={3}\n                                 name=\"coinToggleGroup\" onClick={this.loadYear}> \n                                    <strong> 1Y </strong> \n                                </ToggleButton>\n                            </ToggleButtonGroup>\n                        </Col>\n                        <Col>\n                            <h6> ${this.state.price} </h6>\n                            <h5> ETH </h5>\n                        </Col>\n                    </Row>\n\n                    <Chart \n                        options={this.state.options}\n                        series={this.state.series}\n                        type=\"area\"\n                        width=\"100%\" \n                    />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default EthSpark;"]},"metadata":{},"sourceType":"module"}